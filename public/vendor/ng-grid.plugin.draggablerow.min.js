function ngGridDraggableRow(initialSortField){function assignEvents(){var vp=grid.$viewport;vp.on("mousedown",onRowMouseDown),vp.on("dragover",dragOver),vp.on("drop",onRowDrop)}function getTargetRowItemFromEvent(event){var elm=$(event.target).closest(".ngRow"),scope=angular.element(elm).scope();return scope&&scope.row?scope.row.orig:null}function getSelectedRowItems(){for(var rows=[],i=0;i<rowItems.length;i++){var rowItem=rowItems[i];rowItem.selected&&rows.push(rowItem)}return rows}function onRowMouseDown(event){var rowItemClicked=getTargetRowItemFromEvent(event);if(rowItemClicked&&(rowsSrc=$scope[grid.config.data],rowItems=grid.rowCache,rowItemsMove=getSelectedRowItems(),0!==rowItemsMove.length&&-1!==rowItemsMove.indexOf(rowItemClicked))){var ngRows=$(".ngCanvas .ngRow");ngRows.on("dragenter",function(){}),ngRows.on("dragover",function(){$(this).addClass("dragOver")}),ngRows.on("dragleave",function(){$(this).removeClass("dragOver")});var elm=rowItemClicked.clone.elm;elm.attr("draggable","true"),elm.off("dragstart"),elm.on("dragstart",function(evt){var dataTransfer=evt.originalEvent.dataTransfer;dataTransfer.effectAllowed="move",dataTransfer.dropEffect="move",dataTransfer.setData("text","dummy data for Firefox");for(var i=0;i<rowItemsMove.length;i++){var elm=rowItemsMove[i].clone.elm;$(elm).addClass("dragging")}var args={mouseDownEvent:event,dragStartEvent:evt,dataTransfer:dataTransfer,rowItemClicked:rowItemClicked,rowItemsMove:rowItemsMove};$scope.$emit("ngGrigDraggableRowEvent_rowDragStart",args)}),elm.off("dragend"),elm.on("dragend",function(){elm.removeAttr("draggable"),elm.off("dragstart"),elm.off("dragend"),ngRows.off("dragenter"),ngRows.off("dragover"),ngRows.off("dragleave"),ngRows.removeClass("dragOver"),ngRows.removeClass("dragging")})}}function dragOver(event){event.preventDefault()}function onRowDrop(event){event.preventDefault();var sortInfo=grid.config.sortInfo,isNeedInitialSort=!1;if(sortInfo.fields&&sortInfo.fields.length>0){if(!self.initialSortField)return;if(self.initialSortField!==sortInfo.fields[0]||self.initialSortField===sortInfo.fields[0]&&"asc"!==sortInfo.directions[0]){rowsSrc.length=0;for(var i=0;i<rowItems.length;i++)rowsSrc.push(rowItems[i].entity);isNeedInitialSort=!0}}if(isNeedInitialSort){for(var sortCol=null,cols=$scope.columns,i=0;i<cols.length;i++){var col=cols[i];if(col.field===self.initialSortField){sortCol=col;break}}sortCol.sort()}var rowItemDst=getTargetRowItemFromEvent(event);$scope.$emit("ngGrigDraggableRowEvent_changeRowOrderPre",isNeedInitialSort),changeRowOrder(rowItemsMove,rowItemDst),$scope.$emit("ngGrigDraggableRowEvent_changeRowOrderPost",isNeedInitialSort),applyDataChanges(),services.DomUtilityService.digest($scope.$root),rowItemsMove.length=0}function changeRowOrder(rowItemsMove,rowItemDst){for(var insPos=rowItems.indexOf(rowItemDst)+1,rowsDummy=[],rowsIns=[],i=0;i<rowItemsMove.length;i++){var rowDummy={isDummy:!0};rowsDummy.push(rowDummy),rowsIns.push(rowsSrc.splice(rowItemsMove[i].rowIndex,1,rowDummy)[0])}for(var i=0;i<rowsIns.length;i++)rowsSrc.splice(insPos+i,0,rowsIns[i]);for(var i=0;i<rowsDummy.length;i++)rowsSrc.splice(rowsSrc.indexOf(rowsDummy[i]),1)}function applyDataChanges(){grid.data=$.extend([],$scope.$eval(grid.config.data)),grid.rowFactory.fixRowCache(),angular.forEach(grid.data,function(item,j){var indx=grid.rowMap[j]||j;grid.rowCache[indx]&&grid.rowCache[indx].ensureEntity(item),grid.rowMap[indx]=j}),grid.searchProvider.evalFilter(),grid.configureColumnWidths(),grid.refreshDomSizes(),grid.config.sortInfo.fields.length>0&&(grid.sortColumnsInit(),$scope.$emit("ngGridEventSorted",grid.config.sortInfo)),$scope.$emit("ngGridEventData",grid.gridId),$scope.adjustScrollTop(grid.$viewport.scrollTop(),!0)}var self=this,$scope=null,grid=null,services=null,rowsSrc=[],rowItems=[],rowItemsMove=[];self.initialSortField=initialSortField,self.init=function(_scope,_grid,_services){$scope=_scope,grid=_grid,services=_services,assignEvents()}}